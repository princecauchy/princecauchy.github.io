<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[express框架实践(3)]]></title>
      <url>http://mathscs.com/2016/07/13/nodejs/express%E6%A1%86%E6%9E%B6%E5%AE%9E%E8%B7%B5(3)/</url>
      <content type="html"><![CDATA[<p>express examples(三) resource,</p>
<a id="more"></a>
<h2 id="express-examples-三"><a href="#express-examples-三" class="headerlink" title="express examples(三)"></a>express examples(三)</h2><h3 id="resource"><a href="#resource" class="headerlink" title="resource"></a>resource</h3><p>对user资源的批量读取,单个读取,删除等操作.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">app.resource = <span class="function"><span class="keyword">function</span>(<span class="params">path, obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.get(path, obj.index);</span><br><span class="line">  <span class="keyword">this</span>.get(path + <span class="string">'/:a..:b.:format?'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="built_in">parseInt</span>(req.params.a, <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">var</span> b = <span class="built_in">parseInt</span>(req.params.b, <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">var</span> format = req.params.format;</span><br><span class="line">    obj.range(req, res, a, b, format);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">this</span>.get(path + <span class="string">'/:id'</span>, obj.show);</span><br><span class="line">  <span class="keyword">this</span>.delete(path + <span class="string">'/:id'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> id = <span class="built_in">parseInt</span>(req.params.id, <span class="number">10</span>);</span><br><span class="line">    obj.destroy(req, res, id);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> User = &#123;</span><br><span class="line">  index: <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">    res.send(users);</span><br><span class="line">  &#125;,</span><br><span class="line">  show: <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">    res.send(users[req.params.id] || &#123; error: <span class="string">'Cannot find user'</span> &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  destroy: <span class="function"><span class="keyword">function</span>(<span class="params">req, res, id</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> destroyed = id <span class="keyword">in</span> users;</span><br><span class="line">    <span class="keyword">delete</span> users[id];</span><br><span class="line">    res.send(destroyed ? <span class="string">'destroyed'</span> : <span class="string">'Cannot find user'</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  range: <span class="function"><span class="keyword">function</span>(<span class="params">req, res, a, b, format</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> range = users.slice(a, b + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">switch</span> (format) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'json'</span>:</span><br><span class="line">        res.send(range);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'html'</span>:</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">var</span> html = <span class="string">'&lt;ul&gt;'</span> + range.map(<span class="function"><span class="keyword">function</span>(<span class="params">user</span>)</span>&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="string">'&lt;li&gt;'</span> + user.name + <span class="string">'&lt;/li&gt;'</span>;</span><br><span class="line">        &#125;).join(<span class="string">'\n'</span>) + <span class="string">'&lt;/ul&gt;'</span>;</span><br><span class="line">        res.send(html);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">app.resource(<span class="string">'/users'</span>, User);</span><br></pre></td></tr></table></figure></p>
<h3 id="route-map"><a href="#route-map" class="headerlink" title="route-map"></a>route-map</h3><p>路由批量映射.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">app.map = <span class="function"><span class="keyword">function</span>(<span class="params">a, route</span>)</span>&#123;</span><br><span class="line">  route = route || <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> a) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (<span class="keyword">typeof</span> a[key]) &#123;</span><br><span class="line">      <span class="comment">// &#123; '/path': &#123; ... &#125;&#125;</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">'object'</span>:</span><br><span class="line">        app.map(a[key], route + key);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="comment">// get: function()&#123; ... &#125;</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">'function'</span>:</span><br><span class="line">        <span class="keyword">if</span> (verbose) <span class="built_in">console</span>.log(<span class="string">'%s %s'</span>, key, route);</span><br><span class="line">        app[key](route, a[key]);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">app.map(&#123;</span><br><span class="line">  <span class="string">'/users'</span>: &#123;</span><br><span class="line">    get: users.list,</span><br><span class="line">    <span class="keyword">delete</span>: users.delete,</span><br><span class="line">    <span class="string">'/:uid'</span>: &#123;</span><br><span class="line">      get: users.get,</span><br><span class="line">      <span class="string">'/pets'</span>: &#123;</span><br><span class="line">        get: pets.list,</span><br><span class="line">        <span class="string">'/:pid'</span>: &#123;</span><br><span class="line">          <span class="keyword">delete</span>: pets.delete</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h3 id="search"><a href="#search" class="headerlink" title="search"></a>search</h3><p>介绍jade模板,及引入js.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">doctype</span><br><span class="line">&lt;!-- jade 模板 --&gt;</span><br><span class="line">html</span><br><span class="line">  head</span><br><span class="line">    title Search example</span><br><span class="line">    style.</span><br><span class="line">      body &#123;</span><br><span class="line">        font: 14px &quot;Helvetica Neue&quot;, Helvetica;</span><br><span class="line">        padding: 50px;</span><br><span class="line">      &#125;</span><br><span class="line">  body</span><br><span class="line">    h2 Search</span><br><span class="line">    p Try searching for &quot;ferret&quot; or &quot;cat&quot;.</span><br><span class="line">    input(type=&apos;search&apos;)</span><br><span class="line">    pre</span><br><span class="line">    script(src=&apos;client.js&apos;)</span><br></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//client.js</span></span><br><span class="line"><span class="keyword">var</span> search = <span class="built_in">document</span>.querySelector(<span class="string">'[type=search]'</span>);</span><br><span class="line"><span class="keyword">var</span> code = <span class="built_in">document</span>.querySelector(<span class="string">'pre'</span>);</span><br><span class="line"></span><br><span class="line">search.addEventListener(<span class="string">'keyup'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest;</span><br><span class="line">  xhr.open(<span class="string">'GET'</span>, <span class="string">'/search/'</span> + search.value, <span class="literal">true</span>);</span><br><span class="line">  xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">4</span> == xhr.readyState) &#123;</span><br><span class="line">      code.textContent = xhr.responseText;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  xhr.send();</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure>
<h3 id="session"><a href="#session" class="headerlink" title="session"></a>session</h3><p>利用redis同步存储session对象.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> session = <span class="built_in">require</span>(<span class="string">'express-session'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> RedisStore = <span class="built_in">require</span>(<span class="string">'connect-redis'</span>)(session);</span><br><span class="line"></span><br><span class="line">app.use(session(&#123;</span><br><span class="line">  resave: <span class="literal">false</span>, <span class="comment">// don't save session if unmodified</span></span><br><span class="line">  saveUninitialized: <span class="literal">false</span>, <span class="comment">// don't create session until something stored</span></span><br><span class="line">  secret: <span class="string">'keyboard cat'</span>,</span><br><span class="line">  store: <span class="keyword">new</span> RedisStore(&#123; host: <span class="string">'localhost'</span>, port: <span class="number">6379</span>, client: client,ttl :  <span class="number">260</span>&#125;)</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[express框架实践(2)]]></title>
      <url>http://mathscs.com/2016/07/13/nodejs/express%E6%A1%86%E6%9E%B6%E5%AE%9E%E8%B7%B5(2)/</url>
      <content type="html"><![CDATA[<p>express examples(二)</p>
<a id="more"></a>
<h2 id="express-examples-二"><a href="#express-examples-二" class="headerlink" title="express examples(二)"></a>express examples(二)</h2><h3 id="downloads"><a href="#downloads" class="headerlink" title="downloads"></a>downloads</h3><h4 id="访问下载地址"><a href="#访问下载地址" class="headerlink" title="访问下载地址"></a>访问下载地址</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/files/:file(*)'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> file = req.params.file;</span><br><span class="line">  <span class="keyword">var</span> path = __dirname + <span class="string">'/files/'</span> + file;</span><br><span class="line"></span><br><span class="line">  res.download(path, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!err) <span class="keyword">return</span>; <span class="comment">// file sent</span></span><br><span class="line">    <span class="keyword">if</span> (err &amp;&amp; err.status !== <span class="number">404</span>) <span class="keyword">return</span> next(err); <span class="comment">// non-404 error</span></span><br><span class="line">    <span class="comment">// file for download not found</span></span><br><span class="line">    res.statusCode = <span class="number">404</span>;</span><br><span class="line">    res.send(<span class="string">'Cant find that file, sorry!'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="ejs视图模版"><a href="#ejs视图模版" class="headerlink" title="ejs视图模版"></a>ejs视图模版</h3><h4 id="ejs模版使用"><a href="#ejs模版使用" class="headerlink" title="ejs模版使用"></a>ejs模版使用</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">app.engine(<span class="string">'.html'</span>, <span class="built_in">require</span>(<span class="string">'ejs'</span>).__express);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Optional since express defaults to CWD/views</span></span><br><span class="line"></span><br><span class="line">app.set(<span class="string">'views'</span>, __dirname + <span class="string">'/views'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Without this you would need to</span></span><br><span class="line"><span class="comment">// supply the extension to res.render()</span></span><br><span class="line"><span class="comment">// ex: res.render('users.html').</span></span><br><span class="line">app.set(<span class="string">'view engine'</span>, <span class="string">'html'</span>);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">  res.render(<span class="string">'users'</span>, &#123;</span><br><span class="line">    users: users,</span><br><span class="line">    title: <span class="string">"EJS example"</span>,</span><br><span class="line">    header: <span class="string">"Some users"</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;% include header.html %&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;Users&lt;/h1&gt;</span><br><span class="line">&lt;ul id=&quot;users&quot;&gt;</span><br><span class="line">  &lt;% users.forEach(function(user)&#123; %&gt;</span><br><span class="line">    &lt;li&gt;&lt;%= user.name %&gt; &amp;lt;&lt;%= user.email %&gt;&amp;gt;&lt;/li&gt;</span><br><span class="line">  &lt;% &#125;) %&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">&lt;% include footer.html %&gt;</span><br></pre></td></tr></table></figure>
<h3 id="error"><a href="#error" class="headerlink" title="error"></a>error</h3><p>定义一个4个参数的方法作为错误处理中间件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// error handling middleware have an arity of 4</span></span><br><span class="line"><span class="comment">// instead of the typical (req, res, next),</span></span><br><span class="line"><span class="comment">// otherwise they behave exactly like regular</span></span><br><span class="line"><span class="comment">// middleware, you may have several of them,</span></span><br><span class="line"><span class="comment">// in different orders etc.</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">error</span>(<span class="params">err, req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// log it</span></span><br><span class="line">  <span class="keyword">if</span> (!test) <span class="built_in">console</span>.error(err.stack);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// respond with 500 "Internal Server Error".</span></span><br><span class="line">  res.status(<span class="number">500</span>);</span><br><span class="line">  res.send(<span class="string">'Internal Server Error'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/next'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// We can also pass exceptions to next()</span></span><br><span class="line">  <span class="comment">// The reason for process.nextTick() is to show that</span></span><br><span class="line">  <span class="comment">// next() can be called inside an async operation,</span></span><br><span class="line">  <span class="comment">// in real life it can be a DB read or HTTP request.</span></span><br><span class="line">  process.nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    next(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'oh no!'</span>));</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>如果向<code>next()</code>方法传递了一个参数,接下来就会跳过其余中间件,直接进入错误处理中间件.</p>
<h3 id="error-page"><a href="#error-page" class="headerlink" title="error-page"></a>error-page</h3><p>利用中间件和ejs模版引擎定义错误处理页面</p>
<h4 id="404页面"><a href="#404页面" class="headerlink" title="404页面"></a>404页面</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/404'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// trigger a 404 since no other middleware</span></span><br><span class="line">  <span class="comment">// will match /404 after this one, and we're not</span></span><br><span class="line">  <span class="comment">// responding here</span></span><br><span class="line">  next();</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Error handlers</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Since this is the last non-error-handling</span></span><br><span class="line"><span class="comment">// middleware use()d, we assume 404, as nothing else</span></span><br><span class="line"><span class="comment">// responded.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// $ curl http://localhost:3000/notfound</span></span><br><span class="line"><span class="comment">// $ curl http://localhost:3000/notfound -H "Accept: application/json"</span></span><br><span class="line"><span class="comment">// $ curl http://localhost:3000/notfound -H "Accept: text/plain"</span></span><br><span class="line"></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>)</span>&#123;</span><br><span class="line">  res.status(<span class="number">404</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// respond with html page</span></span><br><span class="line">  <span class="keyword">if</span> (req.accepts(<span class="string">'html'</span>)) &#123;</span><br><span class="line">    res.render(<span class="string">'404'</span>, &#123; url: req.url &#125;);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// respond with json</span></span><br><span class="line">  <span class="keyword">if</span> (req.accepts(<span class="string">'json'</span>)) &#123;</span><br><span class="line">    res.send(&#123; error: <span class="string">'Not found'</span> &#125;);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// default to plain-text. send()</span></span><br><span class="line">  res.type(<span class="string">'txt'</span>).send(<span class="string">'Not found'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><code>next()</code>会让代码执行到下一个非错误处理中间件.</p>
<h4 id="403、500错误处理页面"><a href="#403、500错误处理页面" class="headerlink" title="403、500错误处理页面"></a>403、500错误处理页面</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">app.enable(<span class="string">'verbose errors'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// disable them in production</span></span><br><span class="line"><span class="comment">// use $ NODE_ENV=production node examples/error-pages</span></span><br><span class="line"><span class="keyword">if</span> (<span class="string">'production'</span> == app.settings.env) app.disable(<span class="string">'verbose errors'</span>);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/403'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// trigger a 403 error</span></span><br><span class="line">  <span class="keyword">var</span> err = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'not allowed!'</span>);</span><br><span class="line">  err.status = <span class="number">403</span>;</span><br><span class="line">  next(err);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/500'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// trigger a generic (500) error</span></span><br><span class="line">  next(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'keyboard cat!'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">err, req, res, next</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// we may use properties of the error object</span></span><br><span class="line">  <span class="comment">// here and next(err) appropriately, or if</span></span><br><span class="line">  <span class="comment">// we possibly recovered from the error, simply next().</span></span><br><span class="line">  res.status(err.status || <span class="number">500</span>);</span><br><span class="line">  res.render(<span class="string">'500'</span>, &#123; error: err &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>500视图文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;% include error_header %&gt;</span><br><span class="line">&lt;h2&gt;Error: &lt;%= error.message %&gt;&lt;/h2&gt;</span><br><span class="line">&lt;% if (settings[&apos;verbose errors&apos;]) &#123; %&gt;</span><br><span class="line">  &lt;pre&gt;&lt;%= error.stack %&gt;&lt;/pre&gt;</span><br><span class="line">&lt;% &#125; else &#123; %&gt;</span><br><span class="line">  &lt;p&gt;An error occurred!&lt;/p&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br><span class="line">&lt;% include footer %&gt;</span><br></pre></td></tr></table></figure></p>
<p>如果代码中执行了<code>app.enable(&#39;verbose errors&#39;)</code>,则视图中判断<code>settings[&#39;verbose errors&#39;]</code>就为true.</p>
<h3 id="expose-data-to-client"><a href="#expose-data-to-client" class="headerlink" title="expose-data-to-client"></a>expose-data-to-client</h3><p>用expose向客户端输出数据.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// earlier on expose an object</span></span><br><span class="line"><span class="comment">// that we can tack properties on.</span></span><br><span class="line"><span class="comment">// all res.locals props are exposed</span></span><br><span class="line"><span class="comment">// to the templates, so "expose" will</span></span><br><span class="line"><span class="comment">// be present.</span></span><br><span class="line"></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>)</span>&#123;</span><br><span class="line">  res.locals.expose = &#123;&#125;;</span><br><span class="line">  <span class="comment">// you could alias this as req or res.expose</span></span><br><span class="line">  <span class="comment">// to make it shorter and less annoying</span></span><br><span class="line">  next();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/user'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// we only want to expose the user</span></span><br><span class="line">  <span class="comment">// to the client for this route:</span></span><br><span class="line">  res.locals.expose.user = req.user;</span><br><span class="line">  res.render(<span class="string">'page'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>jade模版:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">html</span><br><span class="line">  head</span><br><span class="line">    title Express</span><br><span class="line">    script.</span><br><span class="line">      // call this whatever you like,</span><br><span class="line">      // or dump them into individual</span><br><span class="line">      // props like &quot;var user =&quot;</span><br><span class="line">      var data = !&#123;JSON.stringify(expose)&#125;</span><br><span class="line">  body</span><br><span class="line">    h1 Expose client data</span><br><span class="line">    p The following was exposed to the client:</span><br><span class="line">    pre</span><br><span class="line">      script.</span><br><span class="line">        document.write(JSON.stringify(data, null, 2))</span><br></pre></td></tr></table></figure></p>
<p><code>res.locals.expose.user = req.user</code>:向expose中输出user对象.</p>
<h3 id="jade"><a href="#jade" class="headerlink" title="jade"></a>jade</h3><p>jade模版的使用以及静态文件目录的定义.</p>
<h4 id="jade模版"><a href="#jade模版" class="headerlink" title="jade模版"></a>jade模版</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">  res.render(<span class="string">'users'</span>, &#123; users: users &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h4 id="定义静态资源目录"><a href="#定义静态资源目录" class="headerlink" title="定义静态资源目录"></a>定义静态资源目录</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'../../lib/express'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Path to our public directory</span></span><br><span class="line"><span class="keyword">var</span> pub = __dirname + <span class="string">'/public'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// setup middleware</span></span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line">app.use(express.static(pub));</span><br></pre></td></tr></table></figure>
<h3 id="markdown"><a href="#markdown" class="headerlink" title="markdown"></a>markdown</h3><p>markdown模版引擎使用.</p>
<h4 id="注册md为视图模版引擎"><a href="#注册md为视图模版引擎" class="headerlink" title="注册md为视图模版引擎"></a>注册md为视图模版引擎</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> md = <span class="built_in">require</span>(<span class="string">'marked'</span>).parse;</span><br><span class="line"></span><br><span class="line"><span class="comment">// register .md as an engine in express view system</span></span><br><span class="line"></span><br><span class="line">app.engine(<span class="string">'md'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">path, options, fn</span>)</span>&#123;</span><br><span class="line">  fs.readFile(path, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, str</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">return</span> fn(err);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">var</span> html = md(str);</span><br><span class="line">      html = html.replace(<span class="regexp">/\&#123;([^&#125;]+)\&#125;/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params">_, name</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> options[name] || <span class="string">''</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">      fn(<span class="literal">null</span>, html);</span><br><span class="line">    &#125; <span class="keyword">catch</span>(err) &#123;</span><br><span class="line">      fn(err);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.set(<span class="string">'views'</span>, __dirname + <span class="string">'/views'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// make it the default so we dont need .md</span></span><br><span class="line">app.set(<span class="string">'view engine'</span>, <span class="string">'md'</span>);</span><br></pre></td></tr></table></figure>
<h3 id="multipart"><a href="#multipart" class="headerlink" title="multipart"></a>multipart</h3><ul>
<li>详见：<a href="https://github.com/andrewrk/node-multiparty" target="_blank" rel="external">andrewrk/node-multiparty</a></li>
</ul>
<p>处理上传文件.</p>
<h4 id="接收上传的文件的代码"><a href="#接收上传的文件的代码" class="headerlink" title="接收上传的文件的代码"></a>接收上传的文件的代码</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">app.post(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// create a form to begin parsing</span></span><br><span class="line">  <span class="keyword">var</span> form = <span class="keyword">new</span> multiparty.Form();</span><br><span class="line">  <span class="keyword">var</span> image;</span><br><span class="line">  <span class="keyword">var</span> title;</span><br><span class="line"></span><br><span class="line">  form.on(<span class="string">'error'</span>, next);</span><br><span class="line">  form.on(<span class="string">'close'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    res.send(format(<span class="string">'\nuploaded %s (%d Kb) as %s'</span></span><br><span class="line">      , image.filename</span><br><span class="line">      , image.size / <span class="number">1024</span> | <span class="number">0</span></span><br><span class="line">      , title));</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// listen on field event for title</span></span><br><span class="line">  form.on(<span class="string">'field'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">name, val</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (name !== <span class="string">'title'</span>) <span class="keyword">return</span>;</span><br><span class="line">    title = val;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// listen on part event for image file</span></span><br><span class="line">  form.on(<span class="string">'part'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">part</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!part.filename) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (part.name !== <span class="string">'image'</span>) <span class="keyword">return</span> part.resume();</span><br><span class="line">    image = &#123;&#125;;</span><br><span class="line">    image.filename = part.filename;</span><br><span class="line">    image.size = <span class="number">0</span>;</span><br><span class="line">    part.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">buf</span>)</span>&#123;</span><br><span class="line">      image.size += buf.length;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// parse the form</span></span><br><span class="line">  form.parse(req);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><code>form.on()</code>可以绑定error,field,part,close四个事件. </p>
<ul>
<li>error 处理错误</li>
<li>close 解析结束后最后触发</li>
<li>field 解析text类型的域</li>
<li>part 解析file类型的域</li>
</ul>
<p>也可以这样写:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (req.url === <span class="string">'/upload'</span> &amp;&amp; req.method === <span class="string">'POST'</span>) &#123;</span><br><span class="line">  <span class="comment">// parse a file upload</span></span><br><span class="line">  <span class="keyword">var</span> form = <span class="keyword">new</span> multiparty.Form();</span><br><span class="line"></span><br><span class="line">  form.parse(req, <span class="function"><span class="keyword">function</span>(<span class="params">err, fields, files</span>) </span>&#123;</span><br><span class="line">    res.writeHead(<span class="number">200</span>, &#123;<span class="string">'content-type'</span>: <span class="string">'text/plain'</span>&#125;);</span><br><span class="line">    res.write(<span class="string">'received upload:\n\n'</span>);</span><br><span class="line">    res.end(util.inspect(&#123;fields: fields, files: files&#125;));</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="multi-router"><a href="#multi-router" class="headerlink" title="multi-router"></a>multi-router</h3><p>多路由分发</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//app.js</span></span><br><span class="line">app.use(<span class="string">'/api/v1'</span>, <span class="built_in">require</span>(<span class="string">'./controllers/api_v1'</span>));</span><br><span class="line">app.use(<span class="string">'/api/v2'</span>, <span class="built_in">require</span>(<span class="string">'./controllers/api_v2'</span>));</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.send(<span class="string">'Hello form root route.'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//api_v1</span></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'../../..'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> apiv1 = express.Router();</span><br><span class="line"></span><br><span class="line">apiv1.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.send(<span class="string">'Hello from APIv1 root route.'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">apiv1.get(<span class="string">'/users'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.send(<span class="string">'List of APIv1 users.'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = apiv1;</span><br></pre></td></tr></table></figure>
<h3 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h3><p>自动读取controller文件夹下的所有文件,注册controller.<br>用的方式不是router(express.Router()),而是在每个controller文件中定义独立app(=express()),使用parent.use(app);<br>参考:<a href="http://www.expressjs.com.cn/4x/api.html#app.use" target="_blank" rel="external">app.use</a></p>
<h3 id="online"><a href="#online" class="headerlink" title="online"></a>online</h3><p><code>require(&#39;online&#39;)</code>插入登录人id， 查询最近5分钟的登录人ids.</p>
<h3 id="params"><a href="#params" class="headerlink" title="params"></a>params</h3><p>url参数处理中间件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一步</span></span><br><span class="line">app.param([<span class="string">'to'</span>, <span class="string">'from'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next, num, name</span>)</span>&#123;</span><br><span class="line">  req.params[name] = <span class="built_in">parseInt</span>(num, <span class="number">10</span>);</span><br><span class="line">  <span class="keyword">if</span>( <span class="built_in">isNaN</span>(req.params[name]) )&#123;</span><br><span class="line">    next(createError(<span class="number">400</span>, <span class="string">'failed to parseInt '</span>+num));</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    next();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//第二步</span></span><br><span class="line">app.get(<span class="string">'/users/:from-:to'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> <span class="keyword">from</span> = req.params.from;</span><br><span class="line">  <span class="keyword">var</span> to = req.params.to;</span><br><span class="line">  <span class="keyword">var</span> names = users.map(<span class="function"><span class="keyword">function</span>(<span class="params">user</span>)</span>&#123; <span class="keyword">return</span> user.name; &#125;);</span><br><span class="line">  res.send(<span class="string">'users '</span> + names.slice(<span class="keyword">from</span>, to).join(<span class="string">', '</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[express框架实践(1)]]></title>
      <url>http://mathscs.com/2016/05/27/nodejs/express%E6%A1%86%E6%9E%B6%E5%AE%9E%E8%B7%B5(1)/</url>
      <content type="html"><![CDATA[<p>本文详细介绍基于express的应用搭建和改造方法.</p>
<a id="more"></a>
<h2 id="express初始化"><a href="#express初始化" class="headerlink" title="express初始化"></a>express初始化</h2><h3 id="安装express生成器"><a href="#安装express生成器" class="headerlink" title="安装express生成器"></a>安装express生成器</h3><p>使用以下命令安装 express：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install express-generator -g</span><br></pre></td></tr></table></figure></p>
<h3 id="生成express工程"><a href="#生成express工程" class="headerlink" title="生成express工程"></a>生成express工程</h3><p>以下语句在当前工作目录中创建名为 myapp 的 Express 应用程序：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ express myapp</span><br><span class="line">    create : myapp</span><br><span class="line">       create : myapp/package.json</span><br><span class="line">       create : myapp/app.js</span><br><span class="line">       create : myapp/public</span><br><span class="line">       create : myapp/public/javascripts</span><br><span class="line">       create : myapp/public/images</span><br><span class="line">       create : myapp/routes</span><br><span class="line">       create : myapp/routes/index.js</span><br><span class="line">       create : myapp/routes/users.js</span><br><span class="line">       create : myapp/public/stylesheets</span><br><span class="line">       create : myapp/public/stylesheets/style.css</span><br><span class="line">       create : myapp/views</span><br><span class="line">       create : myapp/views/index.jade</span><br><span class="line">       create : myapp/views/layout.jade</span><br><span class="line">       create : myapp/views/error.jade</span><br><span class="line">       create : myapp/bin</span><br><span class="line">       create : myapp/bin/www</span><br></pre></td></tr></table></figure></p>
<p>然后安装依赖项:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd myapp</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure></p>
<p>生成的应用程序具有以下目录结构：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── app.js</span><br><span class="line">├── bin</span><br><span class="line">│   └── www</span><br><span class="line">├── package.json</span><br><span class="line">├── public</span><br><span class="line">│   ├── images</span><br><span class="line">│   ├── javascripts</span><br><span class="line">│   └── stylesheets</span><br><span class="line">│       └── style.css</span><br><span class="line">├── routes</span><br><span class="line">│   ├── index.js</span><br><span class="line">│   └── users.js</span><br><span class="line">└── views</span><br><span class="line">    ├── error.jade</span><br><span class="line">    ├── index.jade</span><br><span class="line">    └── layout.jade</span><br><span class="line"></span><br><span class="line">7 directories, 9 files</span><br></pre></td></tr></table></figure></p>
<h3 id="启动express工程"><a href="#启动express工程" class="headerlink" title="启动express工程"></a>启动express工程</h3><p>在 MacOS 或 Linux 上，采用以下命令运行此应用程序：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ DEBUG=myapp:* npm start</span><br></pre></td></tr></table></figure></p>
<p>在 Windows 上，使用以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; set DEBUG=myapp:* &amp; npm start</span><br></pre></td></tr></table></figure></p>
<p>然后在浏览器中装入 <a href="http://localhost:3000/" target="_blank" rel="external">http://localhost:3000/</a> 以访问此应用程序。</p>
<h2 id="express框架概念汇总"><a href="#express框架概念汇总" class="headerlink" title="express框架概念汇总"></a>express框架概念汇总</h2><h3 id="设置环境"><a href="#设置环境" class="headerlink" title="*设置环境"></a>*设置环境</h3><p>NODE_ENV</p>
<h4 id="设置系统环境变量"><a href="#设置系统环境变量" class="headerlink" title="设置系统环境变量"></a>设置系统环境变量</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">linux &amp; mac: export NODE_ENV=production</span><br><span class="line">windows: set NODE_ENV=production</span><br></pre></td></tr></table></figure>
<h4 id="运行时指定NODE-ENV"><a href="#运行时指定NODE-ENV" class="headerlink" title="运行时指定NODE_ENV"></a>运行时指定NODE_ENV</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ NODE_ENV=dev node cookies</span><br></pre></td></tr></table></figure>
<h4 id="代码中取值NODE-ENV"><a href="#代码中取值NODE-ENV" class="headerlink" title="代码中取值NODE_ENV"></a>代码中取值NODE_ENV</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="string">'test'</span> != process.env.NODE_ENV) app.use(logger(<span class="string">':method :url'</span>));</span><br></pre></td></tr></table></figure>
<p>或者<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'env'</span>)</span><br></pre></td></tr></table></figure></p>
<p>根据NODE_ENV设置配置变量:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 所有环境</span></span><br><span class="line">app.set(<span class="string">'title'</span>, <span class="string">'My Application'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 只用于开发环境</span></span><br><span class="line"><span class="keyword">if</span> (<span class="string">'development'</span> == app.get(<span class="string">'env'</span>)) &#123;</span><br><span class="line">  app.set(<span class="string">'db uri'</span>, <span class="string">'localhost/dev'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 只用于生产环境</span></span><br><span class="line"><span class="keyword">if</span> (<span class="string">'production'</span> == app.get(<span class="string">'env'</span>)) &#123;</span><br><span class="line">  app.set(<span class="string">'db uri'</span>, <span class="string">'n.n.n.n/prod'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="中间件"><a href="#中间件" class="headerlink" title="*中间件"></a>*中间件</h3><p><strong>应用级中间件</strong>、<strong>路由级中间件</strong>以及<strong>错误处理中间件</strong>:<a href="http://www.expressjs.com.cn/guide/using-middleware.html" target="_blank" rel="external">middleware</a></p>
<h2 id="express-examples-一-session-cookie"><a href="#express-examples-一-session-cookie" class="headerlink" title="express examples(一)(session,cookie)"></a>express examples(一)(session,cookie)</h2><p>从examples中学习session,cookie的插件处理方法.<br>examples来自: <a href="https://github.com/expressjs/express/tree/master/examples" target="_blank" rel="external">express/examples</a></p>
<h3 id="auth-设置session"><a href="#auth-设置session" class="headerlink" title="auth (设置session)"></a>auth (设置session)</h3><p>设置session.</p>
<h4 id="访问登录页"><a href="#访问登录页" class="headerlink" title="访问登录页"></a>访问登录页</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app.set(<span class="string">'view engine'</span>, <span class="string">'ejs'</span>);</span><br><span class="line">...</span><br><span class="line">app.get(<span class="string">'/login'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">  res.render(<span class="string">'login'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><code>app.set(&#39;view engine&#39;, &#39;ejs&#39;)</code>定义了使用的视图模版引擎为ejs.<br><code>res.render(&#39;login&#39;)</code>表示返回login.ejs页面.</p>
<h4 id="登录接口"><a href="#登录接口" class="headerlink" title="登录接口"></a>登录接口</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> session = <span class="built_in">require</span>(<span class="string">'express-session'</span>);</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">app.use(session(&#123;</span><br><span class="line">  resave: <span class="literal">false</span>, <span class="comment">// don't save session if unmodified</span></span><br><span class="line">  saveUninitialized: <span class="literal">false</span>, <span class="comment">// don't create session until something stored</span></span><br><span class="line">  secret: <span class="string">'shhhh, very secret'</span></span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">app.post(<span class="string">'/login'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">  authenticate(req.body.username, req.body.password, <span class="function"><span class="keyword">function</span>(<span class="params">err, user</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (user) &#123;</span><br><span class="line">      <span class="comment">// Regenerate session when signing in</span></span><br><span class="line">      <span class="comment">// to prevent fixation</span></span><br><span class="line">      req.session.regenerate(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// Store the user's primary key</span></span><br><span class="line">        <span class="comment">// in the session store to be retrieved,</span></span><br><span class="line">        <span class="comment">// or in this case the entire user object</span></span><br><span class="line">        req.session.user = user;</span><br><span class="line">        req.session.success = <span class="string">'Authenticated as '</span> + user.name</span><br><span class="line">          + <span class="string">' click to &lt;a href="/logout"&gt;logout&lt;/a&gt;. '</span></span><br><span class="line">          + <span class="string">' You may now access &lt;a href="/restricted"&gt;/restricted&lt;/a&gt;.'</span>;</span><br><span class="line">        res.redirect(<span class="string">'back'</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      req.session.error = <span class="string">'Authentication failed, please check your '</span></span><br><span class="line">        + <span class="string">' username and password.'</span></span><br><span class="line">        + <span class="string">' (use "tj" and "foobar")'</span>;</span><br><span class="line">      res.redirect(<span class="string">'/login'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><code>req.session.regenerate(cb)</code>重新生成session,在返回页面的报文中,会在用户浏览器中设置connect.sid这个cookie变量.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Authenticate using our plain-object database of doom!</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">authenticate</span>(<span class="params">name, pass, fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">module</span>.parent) <span class="built_in">console</span>.log(<span class="string">'authenticating %s:%s'</span>, name, pass);</span><br><span class="line">  <span class="keyword">var</span> user = users[name];</span><br><span class="line">  <span class="comment">// query the db for the given username</span></span><br><span class="line">  <span class="keyword">if</span> (!user) <span class="keyword">return</span> fn(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'cannot find user'</span>));</span><br><span class="line">  <span class="comment">// apply the same algorithm to the POSTed password, applying</span></span><br><span class="line">  <span class="comment">// the hash against the pass / salt, if there is a match we</span></span><br><span class="line">  <span class="comment">// found the user</span></span><br><span class="line">  hash(pass, user.salt, <span class="function"><span class="keyword">function</span>(<span class="params">err, hash</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">return</span> fn(err);</span><br><span class="line">    <span class="keyword">if</span> (hash == user.hash) <span class="keyword">return</span> fn(<span class="literal">null</span>, user);</span><br><span class="line">    fn(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'invalid password'</span>));</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="访问受限页面"><a href="#访问受限页面" class="headerlink" title="访问受限页面"></a>访问受限页面</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">restrict</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (req.session.user) &#123;</span><br><span class="line">    next();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    req.session.error = <span class="string">'Access denied!'</span>;</span><br><span class="line">    res.redirect(<span class="string">'/login'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/restricted'</span>, restrict, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">  res.send(<span class="string">'Wahoo! restricted area, click to &lt;a href="/logout"&gt;logout&lt;/a&gt;'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h4 id="登出接口"><a href="#登出接口" class="headerlink" title="登出接口"></a>登出接口</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/logout'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// destroy the user's session to log them out</span></span><br><span class="line">  <span class="comment">// will be re-created next request</span></span><br><span class="line">  req.session.destroy(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    res.redirect(<span class="string">'/'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><code>req.session.destroy()</code>销毁session.</p>
<h3 id="big-view-jade视图引擎"><a href="#big-view-jade视图引擎" class="headerlink" title="big-view (jade视图引擎)"></a>big-view (jade视图引擎)</h3><h4 id="请求资源"><a href="#请求资源" class="headerlink" title="请求资源"></a>请求资源</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">app.set(<span class="string">'views'</span>, __dirname);</span><br><span class="line">app.set(<span class="string">'view engine'</span>, <span class="string">'jade'</span>);</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">  res.render(<span class="string">'pets'</span>, &#123; pets: pets &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>pets.jade页面代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">style.</span><br><span class="line">  body &#123;</span><br><span class="line">    padding: 50px;</span><br><span class="line">    font: 16px &quot;Helvetica Neue&quot;, Helvetica;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">table</span><br><span class="line">  for pet in pets</span><br><span class="line">    tr</span><br><span class="line">      td= pet.name</span><br><span class="line">      td= pet.age</span><br><span class="line">      td= pet.species</span><br></pre></td></tr></table></figure></p>
<h3 id="content-negotiation"><a href="#content-negotiation" class="headerlink" title="content-negotiation"></a>content-negotiation</h3><p>根据请求头的Accept字段返回不同的内容.<br>header.Accept:</p>
<ul>
<li>text/html 返回html结果样式</li>
<li>text/plain 返回text结果样式</li>
<li>application/json 返回json结果样式</li>
</ul>
<h4 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// so either you can deal with different types of formatting</span></span><br><span class="line"><span class="comment">// for expected response in index.js</span></span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">  res.format(&#123;</span><br><span class="line">    html: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      res.send(<span class="string">'&lt;ul&gt;'</span> + users.map(<span class="function"><span class="keyword">function</span>(<span class="params">user</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'&lt;li&gt;'</span> + user.name + <span class="string">'&lt;/li&gt;'</span>;</span><br><span class="line">      &#125;).join(<span class="string">''</span>) + <span class="string">'&lt;/ul&gt;'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    text: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      res.send(users.map(<span class="function"><span class="keyword">function</span>(<span class="params">user</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">' - '</span> + user.name + <span class="string">'\n'</span>;</span><br><span class="line">      &#125;).join(<span class="string">''</span>));</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    json: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      res.json(users);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h4 id="参考地址"><a href="#参考地址" class="headerlink" title="参考地址"></a>参考地址</h4><p><a href="http://www.expressjs.com.cn/4x/api.html#res.format" target="_blank" rel="external"> http://www.expressjs.com.cn/4x/api.html#res.format </a></p>
<h3 id="cookies"><a href="#cookies" class="headerlink" title="cookies"></a>cookies</h3><p>向浏览器中设置cookies.</p>
<h4 id="读取cookies"><a href="#读取cookies" class="headerlink" title="读取cookies"></a>读取cookies</h4><p><code>req.cookies.remember</code>读取名为remember的cookies变量.</p>
<h4 id="保存cookies"><a href="#保存cookies" class="headerlink" title="保存cookies"></a>保存cookies</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cookieParser = <span class="built_in">require</span>(<span class="string">'cookie-parser'</span>);</span><br><span class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// parses request cookies, populating</span></span><br><span class="line"><span class="comment">// req.cookies and req.signedCookies</span></span><br><span class="line"><span class="comment">// when the secret is passed, used</span></span><br><span class="line"><span class="comment">// for signing the cookies.</span></span><br><span class="line">app.use(cookieParser(<span class="string">'my secret here'</span>));</span><br><span class="line"><span class="comment">// parses x-www-form-urlencoded</span></span><br><span class="line">app.use(bodyParser.urlencoded(&#123; extended: <span class="literal">false</span> &#125;));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">app.post(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> minute = <span class="number">60000</span>;</span><br><span class="line">  <span class="keyword">if</span> (req.body.remember) res.cookie(<span class="string">'remember'</span>, <span class="number">1</span>, &#123; maxAge: minute &#125;);</span><br><span class="line">  res.redirect(<span class="string">'back'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><code>req.body.remember</code> 获取表单参数;(详见:<a href="https://github.com/expressjs/body-parser" target="_blank" rel="external">body-parser</a>)<br><code>res.cookie(&#39;remember&#39;, 1, { maxAge: minute })</code> 设置名为remember的cookies变量,生存时间为1分钟.</p>
<h4 id="清除cookies"><a href="#清除cookies" class="headerlink" title="清除cookies"></a>清除cookies</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/forget'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">  res.clearCookie(<span class="string">'remember'</span>);</span><br><span class="line">  res.redirect(<span class="string">'back'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><code>res.clearCookie(&#39;remember&#39;);</code>清除名为remember的cookies变量.</p>
<h3 id="记录日志"><a href="#记录日志" class="headerlink" title="*记录日志"></a>*记录日志</h3><p>require(“morgan”)</p>
<h4 id="自定义日志格式"><a href="#自定义日志格式" class="headerlink" title="自定义日志格式"></a>自定义日志格式</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> logger = <span class="built_in">require</span>(<span class="string">'morgan'</span>);</span><br><span class="line">app.use(logger(<span class="string">':method :url'</span>);</span><br></pre></td></tr></table></figure>
<h3 id="cookie-sessions"><a href="#cookie-sessions" class="headerlink" title="cookie-sessions"></a>cookie-sessions</h3><p>同时支持设置cookie和session的插件.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Git下的多分支开发策略]]></title>
      <url>http://mathscs.com/2016/05/25/tools/Git%E4%B8%8B%E7%9A%84%E5%A4%9A%E5%88%86%E6%94%AF%E5%BC%80%E5%8F%91%E7%AD%96%E7%95%A5/</url>
      <content type="html"><![CDATA[<p>分支策略<br>原文链接:<a href="http://blog.csdn.net/crylearner/article/details/18779137" target="_blank" rel="external">http://blog.csdn.net/crylearner/article/details/18779137</a><br><a id="more"></a></p>
<h2 id="日常开发中几个常见过程"><a href="#日常开发中几个常见过程" class="headerlink" title="日常开发中几个常见过程"></a>日常开发中几个常见过程</h2><ul>
<li>功能开发 (开发人员)</li>
<li>bug修复，包括测试版本的bugfix和生产版本的hotfix (开发人员)</li>
<li>版本集成，包括发布测试版本和生产版本 (项目经理)</li>
<li>版本测试 (测试人员)</li>
</ul>
<h2 id="分支策略的核心任务"><a href="#分支策略的核心任务" class="headerlink" title="分支策略的核心任务"></a>分支策略的核心任务</h2><ul>
<li>保证bug修复与功能开发并行，不会出现堵塞情形。</li>
<li>保证可以快速版本集成。</li>
</ul>
<p>实现方式就是多分支 + 里程碑标记</p>
<h2 id="多分支策略"><a href="#多分支策略" class="headerlink" title="多分支策略"></a>多分支策略</h2><h3 id="develop开发分支"><a href="#develop开发分支" class="headerlink" title="develop开发分支"></a>develop开发分支</h3><p>开发人员日常开发时使用的分支，它代表着最新的开发状态。大多数的时候，最新节点的版本是未经检验的、不可靠的。</p>
<p>为了使develop的开发状态可控，根据代码提交频度，定期做一次集成+基本用例测试。如果可以引入单元测试，就更好了。</p>
<h3 id="feature特性开发分支"><a href="#feature特性开发分支" class="headerlink" title="feature特性开发分支"></a>feature特性开发分支</h3><p>特性开发分支作为对开发分支的补充，保证不会因为特性开发的不完整，导致develop开发分支的不稳定。</p>
<p>对大型功能的开发，或者试验性的开发，可以单独在本地检出feature分支进行开发。只要定期自己将develop分支的内容同步过来即可。</p>
<h3 id="master-主干分支"><a href="#master-主干分支" class="headerlink" title="master 主干分支"></a>master 主干分支</h3><p>代表着稳定状态的分支。任何时候，master分支的最新节点应该都是随时可发布的。</p>
<p>当完成一个里程碑时(完成版本发布、完成hotfix)，应该在主干分支上打上tag，同时将变更内容同步到开发分支。</p>
<h3 id="release-版本发布分支"><a href="#release-版本发布分支" class="headerlink" title="release 版本发布分支"></a>release 版本发布分支</h3><p>实际一般主要用于发布测试版本，<strong>并提供开发人员在此分支上完成测试版本的bug修复</strong>。(如果是发布生产版本，一般直接取用某个测试版本即可)</p>
<ul>
<li><p>测试版本应该从开发版本的当前最新节点检出。为了尽可能保证该节点的稳定性，项目经理应该提前通知开发人员做好代码提交。</p>
</li>
<li><p>修复bug时，可采用敏捷方式。通过每日集成+回归测试（只测试最新标记为修复的bug），完成快速迭代。</p>
</li>
<li><p>bug修复完成后，由项目经理将，并打上tag分支合入主干，同时将主干内容同步到开发分支develop。 bug修复完成后，release分支也不再有存在价值，可以由项目经理删除。</p>
</li>
</ul>
<h3 id="hotfix-生产版本bug修复分支"><a href="#hotfix-生产版本bug修复分支" class="headerlink" title="hotfix  生产版本bug修复分支"></a>hotfix  生产版本bug修复分支</h3><p>修复时，从主干分支上找到对应该生产版本的tag。基于此tag检出hotfix分支，完成修复后合入到主干master，同时打上tag，删除hotfix分支。（同时也别忘了将主干分支往开发分支做一次正向同步）</p>
<p>后记：如果是基于git的版本控制，只有develop分支是必需长期存在的，其他分支事实上都是可以临时性质的。也就是表面上的单分支，也是我以前公司使用的策略（不过也不完全一致，因为完全的多分支管理也确实比较复杂）。</p>
<h2 id="参考文档：主要是基于第一份参考文档。"><a href="#参考文档：主要是基于第一份参考文档。" class="headerlink" title="参考文档：主要是基于第一份参考文档。"></a>参考文档：主要是基于第一份参考文档。</h2><ol>
<li><p>《一个成功的Git分支策略模型》</p>
</li>
<li><p>《有策略的进行分支》</p>
</li>
<li><p>《敏捷开发模式中的分支管理模式》</p>
</li>
<li><p>《敏捷开发模式中的分支管理模式实战与补遗》</p>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mysql优化案例]]></title>
      <url>http://mathscs.com/2016/05/25/db/mysql%E4%BC%98%E5%8C%96/</url>
      <content type="html"><![CDATA[<p>mysql优化案例. </p>
<a id="more"></a>
<h2 id="mysql-like模糊搜索效率问题"><a href="#mysql-like模糊搜索效率问题" class="headerlink" title="mysql like模糊搜索效率问题"></a>mysql like模糊搜索效率问题</h2><p>先放上原始sql:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> p.*</span><br><span class="line"><span class="keyword">FROM</span> post p</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">content</span> <span class="keyword">LIKE</span> <span class="string">'%$中文%'</span></span><br><span class="line">	<span class="keyword">AND</span> <span class="built_in">date</span> &gt; <span class="string">'两个月内时间'</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">id</span> <span class="keyword">DESC</span></span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">0</span>, <span class="number">30</span></span><br></pre></td></tr></table></figure></p>
<p>像这样的模糊查询sql，如果id是单调递增的，date也是单调自增的，用下面的方式效率应该更高点:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> p.*</span><br><span class="line"><span class="keyword">FROM</span> post p, (<span class="keyword">SELECT</span> <span class="keyword">id</span></span><br><span class="line">	<span class="keyword">FROM</span> post</span><br><span class="line">	<span class="keyword">WHERE</span> <span class="built_in">date</span> &gt; <span class="string">'两个月内时间'</span></span><br><span class="line">	<span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">id</span></span><br><span class="line">	<span class="keyword">LIMIT</span> <span class="number">1</span></span><br><span class="line">	) t</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">content</span> <span class="keyword">LIKE</span> <span class="string">'%$中文%'</span></span><br><span class="line">	<span class="keyword">AND</span> p.id &gt;= t.id</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> p.id <span class="keyword">DESC</span></span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">0</span>, <span class="number">30</span></span><br></pre></td></tr></table></figure></p>
<p>其中where中AND 的顺序是无所谓的。</p>
<p>小结：<br>通过主键顺序搜索映射到磁盘上就是顺序读。10万行1k的数据相当于100M，基本是秒级完成。<br>再加上like的匹配，相对于作业类型的SQL属于可接受范围。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[hexo配置]]></title>
      <url>http://mathscs.com/2016/05/25/hexo/hexo%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p>介绍hexo的一些配置方式,以及next主题的配置优化.<br><a id="more"></a></p>
<h2 id="NexT主题设置"><a href="#NexT主题设置" class="headerlink" title="NexT主题设置"></a>NexT主题设置</h2><h3 id="设置文章页面自适应全屏"><a href="#设置文章页面自适应全屏" class="headerlink" title="设置文章页面自适应全屏"></a>设置文章页面自适应全屏</h3><p>参考:<a href="https://github.com/myoss/hexo-theme-next/commit/ef87a48c169589aa1a512261abce967bfb3a6c9f" target="_blank" rel="external">https://github.com/myoss/hexo-theme-next/commit/ef87a48c169589aa1a512261abce967bfb3a6c9f</a></p>
<p>修改主题_config.yml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">+scheme: Pisces</span><br><span class="line">+pisces_layout: fluid</span><br></pre></td></tr></table></figure></p>
<p>修改主题source/css/_schemes/Pisces/_layout.styl<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">+if $pisces_layout == &quot;fluid&quot;</span><br><span class="line">+  @media (min-width: 1300px) // 1366 * 768</span><br><span class="line">+    .header</span><br><span class="line">+    .container .main-inner</span><br><span class="line">+      width 1320px</span><br><span class="line">+    .content-wrap</span><br><span class="line">+      width 1066px</span><br><span class="line">+  @media (min-width: 1900px) // 1920 * 1200</span><br><span class="line">+    .header</span><br><span class="line">+    .container .main-inner</span><br><span class="line">+      width 1874px</span><br><span class="line">+    .content-wrap</span><br><span class="line">+      width 1620px</span><br><span class="line">+  .back-to-top</span><br><span class="line">+    right 20px</span><br></pre></td></tr></table></figure></p>
<p>修改source/css/_variables/Pisces.styl<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> // Back to top</span><br><span class="line"> $b2t-position-bottom          = 40px</span><br><span class="line">+</span><br><span class="line">+$pisces_layout                = hexo-config(&quot;pisces_layout&quot;)</span><br></pre></td></tr></table></figure></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol>
<li><a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="external">theme-next.iissnan.com</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mongodb终端命令]]></title>
      <url>http://mathscs.com/2016/05/23/nodejs/mogodb%E7%BB%88%E7%AB%AF%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<p>mongodb终端命令<br><a id="more"></a></p>
<h2 id="连接mongodb"><a href="#连接mongodb" class="headerlink" title="连接mongodb"></a>连接mongodb</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/opt/mongodb/bin/mongo 127.0.0.1:8888</span><br></pre></td></tr></table></figure>
<h2 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.auth(&#123;&quot;user&quot;:&quot;test&quot;,&quot;pwd&quot;:&quot;test&quot;&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><h3 id="ttl索引"><a href="#ttl索引" class="headerlink" title="ttl索引"></a>ttl索引</h3><p><a href="http://www.hello-code.com/blog/MongoDB/201509/5298.html" target="_blank" rel="external">http://www.hello-code.com/blog/MongoDB/201509/5298.html</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.comments.ensureIndex(&#123;&quot;ts&quot;:1&#125;,&#123;expireAfterSeconds:60&#125;)  #创建TTL索引，过期时间60秒，即60秒时间生成的数据会被删除。</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Git常用命令]]></title>
      <url>http://mathscs.com/2016/05/21/tools/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<p>git常用命令速查.<br><a id="more"></a></p>
<h2 id="图片版"><a href="#图片版" class="headerlink" title="图片版"></a>图片版</h2><p><img src="http://i.imgur.com/kGSQO2n.jpg" alt=""></p>
<h2 id="文字版"><a href="#文字版" class="headerlink" title="文字版"></a>文字版</h2><h3 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git clone &lt;url&gt; #克隆远程版本库</span><br><span class="line">$ git init #初始化本地版本库</span><br></pre></td></tr></table></figure>
<h3 id="修改和提交"><a href="#修改和提交" class="headerlink" title="修改和提交"></a>修改和提交</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ git status #查看状态</span><br><span class="line">$ git diff #查看变更内容</span><br><span class="line">$ git add . #跟踪所有改动过的文件</span><br><span class="line">$ git add &lt;file&gt; #跟踪指定的文件</span><br><span class="line">$ git mv &lt;old&gt; &lt;new&gt; #文件改名</span><br><span class="line">$ git rm &lt;file&gt; #删除文件</span><br><span class="line">$ git rm --cached &lt;file&gt; #停止跟踪文件但不删除</span><br><span class="line">$ git commit -m “commit message” #提交所有更新过的文件</span><br><span class="line">$ git commit --amend #修改最后一次提交</span><br></pre></td></tr></table></figure>
<h3 id="查看提交历史"><a href="#查看提交历史" class="headerlink" title="查看提交历史"></a>查看提交历史</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git log #查看提交历史</span><br><span class="line"></span><br><span class="line">$ git log -p &lt;file&gt; #查看指定文件的提交历史</span><br><span class="line"></span><br><span class="line">$ git blame &lt;file&gt; #以列表方式查看指定文件的提交历史</span><br></pre></td></tr></table></figure>
<h3 id="撤消"><a href="#撤消" class="headerlink" title="撤消"></a>撤消</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --hard HEAD #撤消工作目录中所有未提交文件的修改内容</span><br><span class="line">$ git checkout HEAD &lt;file&gt; #撤消指定的未提交文件的修改内容</span><br><span class="line">$ git revert &lt;commit&gt; #撤消指定的提交</span><br></pre></td></tr></table></figure>
<h3 id="分支与标签"><a href="#分支与标签" class="headerlink" title="分支与标签"></a>分支与标签</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git branch #显示所有本地分支</span><br><span class="line">$ git checkout &lt;branch/tag&gt; #切换到指定分支或标签</span><br><span class="line">$ git branch &lt;new-branch&gt; #创建新分支</span><br><span class="line">$ git branch -d &lt;branch&gt; #删除本地分支</span><br><span class="line">$ git tag #列出所有本地标签</span><br><span class="line">$ git tag &lt;tagname&gt; #基于最新提交创建标签</span><br><span class="line">$ git tag -d &lt;tagname&gt; #删除标签</span><br></pre></td></tr></table></figure>
<h3 id="合并与衍合"><a href="#合并与衍合" class="headerlink" title="合并与衍合"></a>合并与衍合</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git merge &lt;branch&gt; #合并指定分支到当前分支</span><br><span class="line">$ git rebase &lt;branch&gt; #衍合指定分支到当前分支</span><br></pre></td></tr></table></figure>
<h3 id="远程操作"><a href="#远程操作" class="headerlink" title="远程操作"></a>远程操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ git remote -v #查看远程版本库信息</span><br><span class="line">$ git remote show &lt;remote&gt; #查看指定远程版本库信息</span><br><span class="line">$ git remote add &lt;remote&gt; &lt;url&gt; #添加远程版本库</span><br><span class="line">$ git fetch &lt;remote&gt; #从远程库获取代码</span><br><span class="line">$ git pull &lt;remote&gt; &lt;branch&gt; #下载代码及快速合并</span><br><span class="line">$ git push &lt;remote&gt; &lt;branch&gt; #上传代码及快速合并</span><br><span class="line">$ git push &lt;remote&gt; :&lt;branch/tag-name&gt; #删除远程分支或标签</span><br><span class="line">$ git push --tags #上传所有标签</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[appcan 学习 (一) mas基础]]></title>
      <url>http://mathscs.com/2016/03/20/nodejs/appcan%E5%AD%A6%E4%B9%A0(%E4%B8%80)mas%E5%9F%BA%E7%A1%80/</url>
      <content type="html"><![CDATA[<p>mas如何获取传参,以及如何封装接口.<br><a id="more"></a></p>
<h2 id="获取mas接口的参数"><a href="#获取mas接口的参数" class="headerlink" title="获取mas接口的参数"></a>获取mas接口的参数</h2><h3 id="get传参-Param-Robot-Request-Response-IF"><a href="#get传参-Param-Robot-Request-Response-IF" class="headerlink" title="get传参(Param, Robot, Request, Response, IF)"></a>get传参(Param, Robot, Request, Response, IF)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params">Param, Robot, Request, Response, IF</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> params = Param.params;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="表单提交"><a href="#表单提交" class="headerlink" title="表单提交"></a>表单提交</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params">Param, Robot, Request, Response, IF</span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">var</span> arg = Param.fields;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="普通post传输json"><a href="#普通post传输json" class="headerlink" title="普通post传输json"></a>普通post传输json</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params">Param, Robot, Request, Response, IF</span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arg = <span class="built_in">JSON</span>.parse(Param.body.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="resultful风格接口-参数在url中"><a href="#resultful风格接口-参数在url中" class="headerlink" title="resultful风格接口(参数在url中)"></a>resultful风格接口(参数在url中)</h3><p>如接口请求地址是: <a href="http://127.0.0.1:8080/ajax/base/appcan/login" target="_blank" rel="external">http://127.0.0.1:8080/ajax/base/appcan/login</a><br>接口路径配置中,定义<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">path</span>&gt;</span>base/$&#123;company&#125;/login<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>通过访问param对象访问参数.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> params = Param.baas;</span><br></pre></td></tr></table></figure></p>
<h2 id="封装ajax请求接口（get-post）"><a href="#封装ajax请求接口（get-post）" class="headerlink" title="封装ajax请求接口（get,post）"></a>封装ajax请求接口（get,post）</h2><h3 id="封装get请求接口"><a href="#封装get请求接口" class="headerlink" title="封装get请求接口"></a>封装get请求接口</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params">Param, Robot, Request, Response, IF</span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/*</span><br><span class="line">     *AJAX接口</span><br><span class="line">     *用于对接网站数据源</span><br><span class="line">     *option.method    GET 或 POST请求方式</span><br><span class="line">     *option.Cookie	Cookie 信息是否启用</span><br><span class="line">     *option.url	访问目标网站地址</span><br><span class="line">     -option.Params	Params  GET数据</span><br><span class="line">     -option.Enctype	Enctype 表单编码     application/x-www-form-urlencoded  |   multipart/form-data  | application/json  | multipart/form-data |   ""</span><br><span class="line">     -option.Body	Body POST数据</span><br><span class="line">     -option.Files	Files 文件数据</span><br><span class="line">     -option.FileRNLength	上传附件失败时添加 FileRNLength为true 默认为 false </span><br><span class="line">     -option.Headers	Headers 头信息</span><br><span class="line">     -option.CacheControl	CacheControl 头部缓存控制</span><br><span class="line">     -option.BasicAuth	BasicAuth 自动提交数据</span><br><span class="line">     -option.Redir	Redir  重定向</span><br><span class="line">     -option.CA	CA CA信息</span><br><span class="line">     -option.ClientAuthentication	ClientAuthentication 自动填写</span><br><span class="line">     -option.Stream	流信息</span><br><span class="line">     -option.Charset	访问页编码格式</span><br><span class="line">     -option.FileRNLength	默认为true目标网站上传文件编码为GBK时修改为false</span><br><span class="line">	 *为必用参数  -为可选参数</span><br><span class="line">     *Robot	Robot 对象是当前终端访问的上下文对象</span><br><span class="line">     MEAP.AJAX.Runner(option,function(err,res,data),Robot,function(des));   option:目标网站访问信息,  err 网站地址状态 -1 null ,res 目标网站的全部返回信息, data 网站的源码信息,  des 页面源码信息进行预处理</span><br><span class="line">     */</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> option=&#123;</span><br><span class="line">		method : <span class="string">"GET"</span>,</span><br><span class="line">		url : <span class="string">"http://www.baidu.com"</span>,</span><br><span class="line">		params:&#123;</span><br><span class="line">		    name:<span class="string">""</span></span><br><span class="line">		&#125;,</span><br><span class="line">		Cookie : <span class="string">"true"</span>,</span><br><span class="line">		timeout : <span class="number">60</span>,</span><br><span class="line">		agent : <span class="string">"false"</span>,</span><br><span class="line">        FileRNLength : <span class="string">"false"</span>,</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">    Response.setHeader(<span class="string">"Content-type"</span>,<span class="string">"application/json;charset=utf-8"</span>);</span><br><span class="line">	MEAP.AJAX.Runner(option,<span class="function"><span class="keyword">function</span>(<span class="params">err,res,data</span>)</span>&#123;</span><br><span class="line">	    <span class="keyword">if</span>(!err)</span><br><span class="line">	    &#123;</span><br><span class="line">			<span class="comment">//Add your normal handling code</span></span><br><span class="line">            Response.end(data);</span><br><span class="line">	    &#125;</span><br><span class="line">	    <span class="keyword">else</span></span><br><span class="line">	    &#123;</span><br><span class="line">			<span class="comment">//Add your exception handling code </span></span><br><span class="line">            Response.end(<span class="built_in">JSON</span>.stringify(&#123;status:<span class="number">-1</span>, message:<span class="string">"Error"</span>&#125;)); </span><br><span class="line">	    &#125;</span><br><span class="line">	&#125;,Robot);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="封装post请求接口"><a href="#封装post请求接口" class="headerlink" title="封装post请求接口"></a>封装post请求接口</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params">Param, Robot, Request, Response, IF</span>)</span><br><span class="line"></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> option=&#123;</span><br><span class="line">		method : <span class="string">"POST"</span>,</span><br><span class="line">		url : <span class="string">""</span>,</span><br><span class="line">		Cookie : <span class="string">"true"</span>,</span><br><span class="line">		timeout : <span class="number">60</span>,</span><br><span class="line">		Body:&#123;</span><br><span class="line">		    name:<span class="string">""</span></span><br><span class="line">		&#125;,</span><br><span class="line">		Enctype:<span class="string">"application/x-www-form-urlencoded"</span>,</span><br><span class="line">		agent : <span class="string">"false"</span>,</span><br><span class="line">        FileRNLength : <span class="string">"false"</span>,</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">    Response.setHeader(<span class="string">"Content-type"</span>,<span class="string">"application/json;charset=utf-8"</span>);</span><br><span class="line">	MEAP.AJAX.Runner(option,<span class="function"><span class="keyword">function</span>(<span class="params">err,res,data</span>)</span>&#123;</span><br><span class="line">	    <span class="keyword">if</span>(!err)</span><br><span class="line">	    &#123;</span><br><span class="line">			<span class="comment">//Add your normal handling code</span></span><br><span class="line">            Response.end(data);</span><br><span class="line">	    &#125;</span><br><span class="line">	    <span class="keyword">else</span></span><br><span class="line">	    &#123;</span><br><span class="line">			<span class="comment">//Add your exception handling code </span></span><br><span class="line">            Response.end(<span class="built_in">JSON</span>.stringify(&#123;status:<span class="number">-1</span>, message:<span class="string">"Error"</span>&#125;)); </span><br><span class="line">	    &#125;</span><br><span class="line">	&#125;,Robot);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="session"><a href="#session" class="headerlink" title="session"></a>session</h2><h3 id="会话的创建、激活和保持"><a href="#会话的创建、激活和保持" class="headerlink" title="会话的创建、激活和保持"></a>会话的创建、激活和保持</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//session的创建</span></span><br><span class="line"><span class="keyword">var</span> accessToken = Robot.createSession(Response, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//...登录操作</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//激活session</span></span><br><span class="line">Robot.activeSession(<span class="number">3600</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//在session中存入用户数据</span></span><br><span class="line">Robot.set(<span class="string">"company"</span>, Param.baas.Company);</span><br><span class="line"></span><br><span class="line"><span class="comment">//在cookies中返回token,用于下次访问时携带</span></span><br><span class="line"><span class="keyword">var</span> cookies = Response.getHeader(<span class="string">"Set-Cookie"</span>)||[];</span><br><span class="line">cookies.push(<span class="string">"x-mas-app-info="</span> + accesstoken + <span class="string">"; path=/"</span>);</span><br><span class="line">Response.setHeader(<span class="string">"Set-Cookie"</span>, cookies);</span><br><span class="line"></span><br><span class="line">Response.end(data);</span><br></pre></td></tr></table></figure>
<ol>
<li>通过createSession创建会话。激活设为false。只是一个临时会话。此次接口调用结束即失效</li>
<li>登陆成功时，我们调用activeSession激活会话，有效期3600秒。即用户在3600秒之内可以通过此会话访问其他接口。</li>
<li>激活后的会话，我们可以往里写入我们的会话参数。Robot.Set</li>
<li>为了保证前端调用后续接口时自动携带会话Cookie，我们需要把accessToken写入到cookie中。x-mas-app-info</li>
</ol>
<p>例子中，会话有效期3600秒。如果希望能够重置有效期，则可在过滤器中activeSession来重置会话有效期，实现会话保持。</p>
<h3 id="会话与过滤器"><a href="#会话与过滤器" class="headerlink" title="会话与过滤器"></a>会话与过滤器</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params">Param, Robot, Request, Response, i_f, callback</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//创建一个白名单</span></span><br><span class="line">    <span class="keyword">var</span> white = &#123;<span class="string">"code"</span>:<span class="number">1</span>, <span class="string">"login"</span>:<span class="number">1</span>&#125;;</span><br><span class="line">    <span class="comment">//白名单里的接口不用登录,直接访问</span></span><br><span class="line">    <span class="keyword">if</span>(white[Param.i_f.path] == <span class="number">1</span>)&#123;</span><br><span class="line">        callback(<span class="number">0</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(Robot.Get(<span class="string">"status"</span>) != <span class="string">"success"</span>)&#123;</span><br><span class="line">            Response.end(<span class="built_in">JSON</span>.stringify(&#123;status:<span class="number">-1</span>,msg:<span class="string">"you should login first."</span>&#125;));</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//会话保持</span></span><br><span class="line">            Robot.activeSession(<span class="number">3600</span>);</span><br><span class="line">            callback(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="接口日志"><a href="#接口日志" class="headerlink" title="接口日志"></a>接口日志</h2><p>在接口中输出LOG必须使用如下函数便于进行日志收集与分析.</p>
<ul>
<li>Robot.LOG</li>
<li>Robot.WARN</li>
<li>Robot.ERROR</li>
</ul>
<p>接口返回值建议标准:</p>
<ul>
<li>成功使用0  {status:0,data:”xxx”}</li>
<li>失败使用小于0的值   {status:-1,msg:”xxxx”}</li>
<li>大于0的值MAS系统用于表述系统异常或请求不合规。</li>
</ul>
<h2 id="访问一个文件系统-静态网站"><a href="#访问一个文件系统-静态网站" class="headerlink" title="*访问一个文件系统  (静态网站)"></a>*访问一个文件系统  (静态网站)</h2><h2 id="工程间接口调用"><a href="#工程间接口调用" class="headerlink" title="工程间接口调用"></a>工程间接口调用</h2><p>工程cross中的demo接口调用工程ajax中的data接口</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//工程demo中这样写</span></span><br><span class="line"><span class="comment">//CallInterface来调用其他模块接口。</span></span><br><span class="line"><span class="comment">//"ajax"为目标模块名称</span></span><br><span class="line"><span class="comment">//"data"为data接口的path参数</span></span><br><span class="line"><span class="comment">//"get"为data接口的method参数（必须小写）</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params">Param, Robot, Request, Response, IF</span>)</span>&#123;</span><br><span class="line">    Robot.Context.CallInterface(<span class="string">"ajax"</span>, <span class="string">"data"</span>, <span class="string">"get"</span>, Param, Robot, Request, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="如何处理动态网页"><a href="#如何处理动态网页" class="headerlink" title="*如何处理动态网页"></a>*如何处理动态网页</h2><h2 id="mas如何管理服务"><a href="#mas如何管理服务" class="headerlink" title="*mas如何管理服务"></a>*mas如何管理服务</h2><h2 id="mas如何配置服务"><a href="#mas如何配置服务" class="headerlink" title="*mas如何配置服务"></a>*mas如何配置服务</h2>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[nodejs快速掌握]]></title>
      <url>http://mathscs.com/2016/03/20/nodejs/nodejs%E5%BF%AB%E9%80%9F%E6%8E%8C%E6%8F%A1/</url>
      <content type="html"><![CDATA[<p>mongodb访问, async异步流控制, mysql访问.<br><a id="more"></a></p>
<h2 id="mongoose-增删改差，聚合"><a href="#mongoose-增删改差，聚合" class="headerlink" title="mongoose 增删改差，聚合"></a>mongoose 增删改差，聚合</h2><h3 id="mongoose-增删改差-聚合"><a href="#mongoose-增删改差-聚合" class="headerlink" title="mongoose 增删改差,聚合"></a>mongoose 增删改差,聚合</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">"mongoose"</span>);</span><br><span class="line"><span class="keyword">var</span> Schema = mongoose.Schema;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params">Param, Robot, Request, Response, IF</span>) </span>&#123;</span><br><span class="line">    Response.setHeader(<span class="string">"Content-Type"</span>, <span class="string">"text/json;charet=utf-8"</span>);</span><br><span class="line">    <span class="keyword">var</span> userSchema = <span class="keyword">new</span> Schema(&#123;</span><br><span class="line">        <span class="string">"name"</span> : <span class="built_in">String</span>,</span><br><span class="line">        <span class="string">"age"</span> : <span class="built_in">Number</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> conn = mongoose.createConnection(<span class="string">"mongodb://test:test@10.10.1.183:27017/test"</span>);</span><br><span class="line">    <span class="keyword">var</span> userModel = conn.model(<span class="string">"test"</span>, userSchema);</span><br><span class="line">    userModel.find(&#123;&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">        Response.end(<span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">            data : data</span><br><span class="line">        &#125;));</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(data));                              </span><br><span class="line">        findOne();</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">var</span> findOne = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        userModel.findOne(&#123;</span><br><span class="line">            age : <span class="number">26</span></span><br><span class="line">        &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(data));</span><br><span class="line">            aggregate();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> aggregate = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        userModel.aggregate(&#123;</span><br><span class="line">            $group : &#123;</span><br><span class="line">                _id : <span class="string">"$name"</span>,</span><br><span class="line">                sumAge : &#123;</span><br><span class="line">                    $sum : <span class="string">"$age"</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(data));</span><br><span class="line">            conn.close();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="封装webservice接口"><a href="#封装webservice接口" class="headerlink" title="封装webservice接口"></a>封装webservice接口</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params">Param,Robot,Request,Response,IF</span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arg = Param.params;</span><br><span class="line">	<span class="keyword">var</span> option=&#123;</span><br><span class="line">		wsdl:<span class="string">"http://www.webxml.com.cn/WebServices/WeatherWebService.asmx?wsdl"</span>,</span><br><span class="line">		func:<span class="string">"WeatherWebService.WeatherWebServiceSoap.getSupportCity"</span>,</span><br><span class="line">		Params:arg</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	MEAP.SOAP.Runner(option,<span class="function"><span class="keyword">function</span>(<span class="params">err,res,data</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!err)</span><br><span class="line">		&#123;</span><br><span class="line">			Response.end(<span class="built_in">JSON</span>.stringify(data));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			Response.end(<span class="built_in">JSON</span>.stringify(&#123;status:<span class="string">'-1'</span>,message:<span class="string">'Error'</span>&#125;));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="wireshark"><a href="#wireshark" class="headerlink" title="wireshark"></a>wireshark</h2><h3 id="过滤器规则使用"><a href="#过滤器规则使用" class="headerlink" title="过滤器规则使用"></a>过滤器规则使用</h3><ol>
<li>协议过滤<br> 比如TCP，只显示TCP协议。</li>
<li>IP过滤<br> 比如 ip.src ==192.168.1.102 显示源地址为192.168.1.102，<br> ip.dst==192.168.1.102, 目标地址为192.168.1.102</li>
<li>端口过滤<br> tcp.port ==80,  端口为80的<br> tcp.srcport == 80,  只显示TCP协议的愿端口为80的。</li>
<li>http过滤<br> http.request.method==”GET”,   只显示HTTP GET方法的。</li>
<li>逻辑运算符为AND/OR</li>
</ol>
<p>更多详细示例请看:<a href="http://www.cnblogs.com/tankxiao/archive/2012/10/10/2711777.html" target="_blank" rel="external">wireshark</a></p>
<h2 id="tcpdump"><a href="#tcpdump" class="headerlink" title="tcpdump"></a>tcpdump</h2><p>linux下导出网络信息监听文件:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump -i eth2 -t -s 0 -w target.cap</span><br></pre></td></tr></table></figure></p>
<p>其中网卡信息查看,键入命令:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></table></figure></p>
<h2 id="jdbc连接mysql"><a href="#jdbc连接mysql" class="headerlink" title="jdbc连接mysql"></a>jdbc连接mysql</h2><h3 id="数据源配置"><a href="#数据源配置" class="headerlink" title="数据源配置"></a>数据源配置</h3><h3 id="代码部分"><a href="#代码部分" class="headerlink" title="代码部分"></a>代码部分</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sql = MEAP.JDBC.BuildStatement(<span class="string">"select  * from employees where id=?"</span>, [<span class="string">"12"</span>]);</span><br><span class="line"><span class="keyword">var</span> option = &#123;</span><br><span class="line">    name : <span class="string">"mas"</span>, <span class="comment">//数据源名称</span></span><br><span class="line">    sql : sql</span><br><span class="line">&#125;;</span><br><span class="line">MEAP.JDBC.ExecQuery(option, <span class="function"><span class="keyword">function</span>(<span class="params">err, results</span>)</span>&#123;&#125; );</span><br></pre></td></tr></table></figure>
<h2 id="nodejs访问redis"><a href="#nodejs访问redis" class="headerlink" title="nodejs访问redis"></a>nodejs访问redis</h2><p>支持字符串（strings）、哈希（hashes）、列表（lists）、集合（sets）和 有序集合（sorted sets）等；支持对复杂数据结构的高速操作。</p>
<h3 id="redis-createClient-连接到redis服务器"><a href="#redis-createClient-连接到redis服务器" class="headerlink" title="redis.createClient()连接到redis服务器"></a>redis.createClient()连接到redis服务器</h3><p>…</p>
<h3 id="认证-client-auth-password-callback"><a href="#认证-client-auth-password-callback" class="headerlink" title="认证 client.auth(password, callback)"></a>认证 client.auth(password, callback)</h3><p>…</p>
<h3 id="单值set和get"><a href="#单值set和get" class="headerlink" title="单值set和get"></a>单值set和get</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> redis = <span class="built_in">require</span>(<span class="string">'redis'</span>),</span><br><span class="line">    RDS_PORT = <span class="number">6379</span>,        <span class="comment">//端口号</span></span><br><span class="line">    RDS_HOST = <span class="string">'127.0.1.1'</span>,    <span class="comment">//服务器IP</span></span><br><span class="line">    RDS_PWD = <span class="string">'porschev'</span>,    <span class="comment">//密码    </span></span><br><span class="line">    RDS_OPTS = &#123;&#125;,            <span class="comment">//设置项</span></span><br><span class="line">    client = redis.createClient(RDS_PORT,RDS_HOST,RDS_OPTS);</span><br><span class="line"></span><br><span class="line">client.auth(RDS_PWD,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'通过认证'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">client.on(<span class="string">'connect'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    client.set(<span class="string">'author'</span>, <span class="string">'Wilson'</span>,redis.print);</span><br><span class="line">    client.get(<span class="string">'author'</span>, redis.print);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'connect'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">client.on(<span class="string">'ready'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'ready'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="多值get和set"><a href="#多值get和set" class="headerlink" title="多值get和set"></a>多值get和set</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> redis = <span class="built_in">require</span>(<span class="string">'redis'</span>),</span><br><span class="line">    RDS_PORT = <span class="number">6379</span>,        <span class="comment">//端口号</span></span><br><span class="line">    RDS_HOST = <span class="string">'127.0.1.1'</span>,    <span class="comment">//服务器IP</span></span><br><span class="line">    RDS_PWD = <span class="string">'porschev'</span>,    <span class="comment">//密码    </span></span><br><span class="line">    RDS_OPTS = &#123;&#125;,            <span class="comment">//设置项</span></span><br><span class="line">    client = redis.createClient(RDS_PORT,RDS_HOST,RDS_OPTS);</span><br><span class="line"></span><br><span class="line">client.auth(RDS_PWD,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'通过认证'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">client.on(<span class="string">'connect'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    client.hmset(<span class="string">'short'</span>, &#123;<span class="string">'js'</span>:<span class="string">'javascript'</span>,<span class="string">'C#'</span>:<span class="string">'C Sharp'</span>&#125;, redis.print);</span><br><span class="line">    client.hmset(<span class="string">'short'</span>, <span class="string">'SQL'</span>,<span class="string">'Structured Query Language'</span>,<span class="string">'HTML'</span>,<span class="string">'HyperText Mark-up Language'</span>, redis.print);</span><br><span class="line"></span><br><span class="line">    client.hgetall(<span class="string">"short"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err,res</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(err)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'Error:'</span>+ err);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;            </span><br><span class="line">        <span class="built_in">console</span>.dir(res);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">client.on(<span class="string">'ready'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'ready'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="打包执行多个命令-事务"><a href="#打包执行多个命令-事务" class="headerlink" title="打包执行多个命令(事务)"></a>打包执行多个命令(事务)</h3><p>更多详细示例:<a href="http://www.cnblogs.com/zhongweiv/p/node_redis.html" target="_blank" rel="external">redis</a></p>
<h2 id="async库的使用"><a href="#async库的使用" class="headerlink" title="async库的使用"></a>async库的使用</h2><p><a href="http://www.webrube.com/node.js-web_rube/1468" target="_blank" rel="external">nodejs中Async库介绍</a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="keyword">async</span> = <span class="built_in">require</span>(<span class="string">"async"</span>);</span><br></pre></td></tr></table></figure></p>
<h3 id="series"><a href="#series" class="headerlink" title="series"></a>series</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">async</span>.series([</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> option = &#123;</span><br><span class="line">            method : <span class="string">"GET"</span>,</span><br><span class="line">            url : <span class="string">"http://www.baidu.com"</span></span><br><span class="line">        &#125;;</span><br><span class="line">        MEAP.AJAX.Runner(option, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="number">111</span>);</span><br><span class="line">            cb(err, <span class="number">1</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> option = &#123;</span><br><span class="line">            method : <span class="string">"GET"</span>,</span><br><span class="line">            url : <span class="string">"http://www.163.com"</span></span><br><span class="line">        &#125;;</span><br><span class="line">        MEAP.AJAX.Runner(option, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="number">222</span>);</span><br><span class="line">            cb(err, <span class="number">2</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> option = &#123;</span><br><span class="line">            method : <span class="string">"GET"</span>,</span><br><span class="line">            url : <span class="string">"http://www.taobao.com"</span></span><br><span class="line">        &#125;;</span><br><span class="line">        MEAP.AJAX.Runner(option, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="number">333</span>);</span><br><span class="line">            cb(err, <span class="number">3</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;], <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err, data);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该函数的详细解释为：</p>
<blockquote>
<p>依次执行一个函数数组中的每个函数，每一个函数执行完成之后才能执行下一个函数。</p>
<p>如果任何一个函数向它的回调函数中了一个error，则后面的函数都不会被执行，并且将会立刻会将该error以及已经执行了的函数的结果，给series中最后那个callback。</p>
<p>当所有的函数执行完后（没有出错），则会把每个函数给其回调函数的结果合并为一个数组，给series最后的那个callback。</p>
<p>还可以json的形式来提供tasks。每一个属性都会被当作函数来执行，并且结果也会以json形式给series最后的那个callback。这种方式可读性更高一些。</p>
</blockquote>
<p>具体例子可参考：<a href="https://github.com/freewind/async_demo/blob/master/series.js" title="https://github.com/freewind/async_demo/blob/master/series.js" target="_blank" rel="external">https://github.com/freewind/async_demo/blob/master/series.js</a><br>其中还包含了：</p>
<blockquote>
<p>如果中间某个函数出错，series函数如何处理</p>
<p>如果某个函数给回调的值为undefined, null, {}, []等，series如何处理</p>
<p>另外还需要注意的是：多个series调用之间是不分先后的，为series本身也是异步调用。</p>
</blockquote>
<h3 id="waterfall"><a href="#waterfall" class="headerlink" title="waterfall"></a>waterfall</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span>.waterfall([<span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">        log(<span class="string">'1: '</span>, <span class="string">'start'</span>);</span><br><span class="line">        cb(<span class="literal">null</span>, <span class="number">3</span>);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">n, cb</span>) </span>&#123;</span><br><span class="line">        log(<span class="string">'2: '</span>, n);</span><br><span class="line">        t.inc(n, cb);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">n, cb</span>) </span>&#123;</span><br><span class="line">        log(<span class="string">'3: '</span>, n);</span><br><span class="line">        t.fire(n * n, cb);</span><br><span class="line">&#125;],</span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">err, result</span>) </span>&#123;</span><br><span class="line">        log(’<span class="number">1</span> err: ‘, err); <span class="comment">// -&gt; null</span></span><br><span class="line">        log(’<span class="number">1</span> result: ‘, result); <span class="comment">// -&gt; 16</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>与seires相似，按顺序依次执行多个函数。不同之处，每一个函数产生的值，都将给下一个函数。如果中途出错，后面的函数将不会被执行。错误信息以及之前产生的结果，将给waterfall最终的callback。<br>这个函数名为waterfall(瀑布)，可以想像瀑布从上到下，中途冲过一层层突起的石头。注意，该函数不支持json式的tasks。</p>
<h3 id="parallel"><a href="#parallel" class="headerlink" title="parallel"></a>parallel</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">g</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">    <span class="keyword">async</span>.parallel([</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> option = &#123;</span><br><span class="line">            method : <span class="string">"GET"</span>,</span><br><span class="line">            url : <span class="string">"http://www.google.com"</span></span><br><span class="line">        &#125;;</span><br><span class="line">        MEAP.AJAX.Runner(option, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="number">111</span>);</span><br><span class="line">            cb(err, <span class="number">1</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> option = &#123;</span><br><span class="line">            method : <span class="string">"GET"</span>,</span><br><span class="line">            url : <span class="string">"http://www.163.com"</span></span><br><span class="line">        &#125;;</span><br><span class="line">        MEAP.AJAX.Runner(option, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="number">222</span>);</span><br><span class="line">            cb(err, <span class="number">2</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> option = &#123;</span><br><span class="line">            method : <span class="string">"GET"</span>,</span><br><span class="line">            url : <span class="string">"http://www.taobao.com"</span></span><br><span class="line">        &#125;;</span><br><span class="line">        MEAP.AJAX.Runner(option, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="number">333</span>);</span><br><span class="line">            cb(err, <span class="number">3</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;], <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err, data);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该函数的详细解释:</p>
<blockquote>
<p>并行执行多个函数，每个函数都是立即执行，不需要等待其它函数先执行。给最终callback的数组中的数据按照tasks中声明的顺序，而不是执行完成的顺序。</p>
<p>如果某个函数出错，则立刻将err和已经执行完的函数的结果值给parallel最终的callback。其它未执行完的函数的值不会到最终数据，但要个位置。</p>
<p>同时支持json形式的tasks，其最终callback的结果也为json形式。</p>
</blockquote>
<h3 id="queue"><a href="#queue" class="headerlink" title="queue"></a>queue</h3><p>queue相当于一个强版的parallel，主要是限制了worker数量，不再一次性全部执行。当worker数量不够用时，新入的任务将会排队等候，直到有新的worker可用。</p>
<p>该函数有多个点可供回调，如worker用完时、等候任务时、全部执行完时等。</p>
<p>定义一个queue，其worker数量为2，并在任务执行时，记录一下日志：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">h</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line">    <span class="keyword">var</span> queue = <span class="keyword">async</span>.queue(<span class="function"><span class="keyword">function</span>(<span class="params">task, cb</span>) </span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(task);</span><br><span class="line">            cb(<span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">        &#125;, <span class="number">3000</span>);</span><br><span class="line">    &#125;, <span class="number">2</span>);</span><br><span class="line">    queue.push(arr);</span><br><span class="line">    queue.drain = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"all tasks have been processed"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>更多详细示例参见：<a href="https://github.com/freewind/async_demo/blob/master/queue.js" target="_blank" rel="external">queue</a></p>
<h3 id="auto"><a href="#auto" class="headerlink" title="auto"></a>auto</h3><p>更多详细示例:<a href="https://github.com/freewind/async_demo/blob/master/auto.js" target="_blank" rel="external">auto</a></p>
<h3 id="whilst"><a href="#whilst" class="headerlink" title="whilst"></a>whilst</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span>.whilst(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">cb</span>)</span>&#123;&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;&#125;)</span><br></pre></td></tr></table></figure>
<p>更详细示例参见<a href="https://github.com/freewind/async_demo/blob/master/whilst_until.js" target="_blank" rel="external">whilst</a></p>
<h3 id="until"><a href="#until" class="headerlink" title="until"></a>until</h3><p>与whilst相似,但是判断条件相反.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span>.until(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">cb</span>)</span>&#123;&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;&#125;)</span><br></pre></td></tr></table></figure></p>
<h3 id="iterator"><a href="#iterator" class="headerlink" title="iterator"></a>iterator</h3><p>将一组函数包装成为一个iterator，可通过next()得到以下一个函数为起点的新的iterator。该函数通常由async在内部使用，但如果需要时，也可在我们的代码中使用它。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> iter = <span class="keyword">async</span>.iterator([<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'111'</span>)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'222'</span>)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'333'</span>)</span><br><span class="line">&#125;]);</span><br><span class="line"><span class="built_in">console</span>.log(iter());</span><br><span class="line"><span class="built_in">console</span>.log(iter.next());</span><br></pre></td></tr></table></figure></p>
<p>直接调用()，会执行当前函数，并返回一个由下个函数为起点的新的iterator。</p>
<p>调用next()，不会执行当前函数，直接返回由下个函数为起点的新iterator。</p>
<p>对于同一个iterator，多次调用next()，不会影响自己.</p>
<p>如果只有一个元素，则next()返回null.</p>
<p>更详细示例参见：<a href="https://github.com/freewind/async_demo/blob/master/iterator.js" target="_blank" rel="external">iterator</a></p>
<h2 id="ajax处理网页"><a href="#ajax处理网页" class="headerlink" title="ajax处理网页"></a>ajax处理网页</h2><p>引入cheerio包,类似于jquery插件.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $=<span class="built_in">require</span>(<span class="string">"cheerio"</span>);</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
  
  
</search>
